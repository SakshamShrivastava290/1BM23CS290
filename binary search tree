#include <stdio.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* createnode(int value){
    struct Node*node =(struct Node*)malloc(sizeof(struct Node*));
    node->data=value;
    node->left=NULL;
    node->right=NULL;
    return node;
}

struct Node *insert(struct Node*root, int value){
    if(root==NULL){
        return createnode(value);
    }
    if(value< root->data){
        root->left = insert(root->left,value);
    }else{
        root->right=insert(root->right,value);
    }
    return root;
}

void inorderTraversal(struct Node*root){
    if(root!=NULL){
        inorderTraversal(root->left);
        printf("%d ",root->data);
        inorderTraversal(root->right);
    }
}

void preorderTraversal(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorderTraversal(root->left);
        preorderTraversal(root->right);
    }
}

void postorderTraversal(struct Node* root) {
    if (root != NULL) {
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        printf("%d ", root->data);
    }
}

void displayTree(struct Node* root) {
    printf("In-Order Traversal: ");
    inorderTraversal(root);
    printf("\n");

    printf("Pre-Order Traversal: ");
    preorderTraversal(root);
    printf("\n");

    printf("Post-Order Traversal: ");
    postorderTraversal(root);
    printf("\n");
}

int main() {
    struct Node* root = NULL;
    int n, value;

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter value to insert: ");
        scanf("%d", &value);
        root = insert(root, value);
    }

    displayTree(root);

    return 0;
}
